{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\React\\\\Pneuma\\\\Pneuma\\\\app\\\\screens\\\\DashboardScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { LineChart, YAxis, Grid } from 'react-native-svg-charts';\nimport * as shape from 'd3-shape';\nimport { getData } from \"../services/cloudant\";\n\nvar DashboardScreen = function (_Component) {\n  _inherits(DashboardScreen, _Component);\n\n  var _super = _createSuper(DashboardScreen);\n\n  function DashboardScreen(props) {\n    var _this;\n\n    _classCallCheck(this, DashboardScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: [{\n        value: 1\n      }, {\n        value: 2\n      }, {\n        value: 3\n      }, {\n        value: 4\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(DashboardScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.dataInterval = setInterval(function () {\n        return getData().then(function (data) {\n          return _this2.setState({\n            data: data.docs || _this2.state.data\n          });\n        }).catch(function (err) {\n          return console.error(err);\n        });\n      }, 500);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.dataInterval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.state.data.map(function (item) {\n        return item.value;\n      });\n      var contentInset = {\n        top: 20,\n        bottom: 20\n      };\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }\n      }, \"Gotcha!\"), React.createElement(View, {\n        style: {\n          height: '60%',\n          width: '100%',\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, React.createElement(YAxis, {\n        data: data,\n        contentInset: contentInset,\n        svg: {\n          fill: 'grey',\n          fontSize: 10\n        },\n        numberOfTicks: 10,\n        formatLabel: function formatLabel(value) {\n          return value + \" ppm\";\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }), React.createElement(LineChart, {\n        style: {\n          width: '80%',\n          marginLeft: 16\n        },\n        data: data,\n        svg: {\n          stroke: 'rgb(134, 65, 244)',\n          strokeWidth: 3\n        },\n        contentInset: contentInset,\n        curve: shape.curveNatural,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }, React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return DashboardScreen;\n}(Component);\n\nDashboardScreen.navigationOptions = {\n  title: 'Dashboard'\n};\nexport { DashboardScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/React/Pneuma/Pneuma/app/screens/DashboardScreen.js"],"names":["React","Component","LineChart","YAxis","Grid","shape","getData","DashboardScreen","props","state","data","value","dataInterval","setInterval","then","setState","docs","catch","err","console","error","clearInterval","map","item","contentInset","top","bottom","styles","container","height","width","flexDirection","fill","fontSize","marginLeft","stroke","strokeWidth","curveNatural","navigationOptions","title","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,IAA3B,QAAuC,yBAAvC;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AAEA,SAASC,OAAT;;IAEqBC,e;;;;;AAKjB,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AAIA,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,CAAC;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAD,EAAe;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAf,EAA6B;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAA7B,EAA2C;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAA3C;AADG,KAAb;AALe;AAQlB;;;;wCAEmB;AAAA;;AAChB,WAAKC,YAAL,GAAoBC,WAAW,CAAC;AAAA,eAAMP,OAAO,GACxCQ,IADiC,CAC5B,UAAAJ,IAAI;AAAA,iBAAI,MAAI,CAACK,QAAL,CAAc;AAAEL,YAAAA,IAAI,EAAEA,IAAI,CAACM,IAAL,IAAa,MAAI,CAACP,KAAL,CAAWC;AAAhC,WAAd,CAAJ;AAAA,SADwB,EAEjCO,KAFiC,CAE3B,UAACC,GAAD;AAAA,iBAASC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAT;AAAA,SAF2B,CAAN;AAAA,OAAD,EAGzB,GAHyB,CAA/B;AAIH;;;2CAEsB;AACnBG,MAAAA,aAAa,CAAC,KAAKT,YAAN,CAAb;AACH;;;6BAEQ;AACL,UAAMF,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBY,GAAhB,CAAoB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACZ,KAAT;AAAA,OAAxB,CAAb;AACA,UAAMa,YAAY,GAAG;AAAEC,QAAAA,GAAG,EAAE,EAAP;AAAWC,QAAAA,MAAM,EAAE;AAAnB,OAArB;AAEA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAGI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE,KAAV;AAAiBC,UAAAA,KAAK,EAAE,MAAxB;AAAgCC,UAAAA,aAAa,EAAE;AAA/C,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAErB,IADV;AAEI,QAAA,YAAY,EAAEc,YAFlB;AAGI,QAAA,GAAG,EAAE;AACDQ,UAAAA,IAAI,EAAE,MADL;AAEDC,UAAAA,QAAQ,EAAE;AAFT,SAHT;AAOI,QAAA,aAAa,EAAE,EAPnB;AAQI,QAAA,WAAW,EAAE,qBAACtB,KAAD;AAAA,iBAAcA,KAAd;AAAA,SARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAWI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAE;AAAEmB,UAAAA,KAAK,EAAE,KAAT;AAAgBI,UAAAA,UAAU,EAAE;AAA5B,SADX;AAEI,QAAA,IAAI,EAAExB,IAFV;AAGI,QAAA,GAAG,EAAE;AAAEyB,UAAAA,MAAM,EAAE,mBAAV;AAA+BC,UAAAA,WAAW,EAAE;AAA5C,SAHT;AAII,QAAA,YAAY,EAAEZ,YAJlB;AAKI,QAAA,KAAK,EAAEnB,KAAK,CAACgC,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,CAXJ,CAHJ,CADJ;AAkCH;;;;EAhEwCpC,S;;AAAxBM,e,CACV+B,iB,GAAoB;AACvBC,EAAAA,KAAK,EAAE;AADgB,C;SADVhC,e;AAmErB,IAAMoB,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;AAC7Bb,EAAAA,SAAS,EAAE;AACPc,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT;AADkB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport { LineChart, YAxis, Grid } from 'react-native-svg-charts'\r\nimport * as shape from 'd3-shape'\r\n\r\nimport { getData } from '../services/cloudant'\r\n\r\nexport default class DashboardScreen extends Component {\r\n    static navigationOptions = {\r\n        title: 'Dashboard'\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //const someExtractedParam = this.props.navigation.getParam('someParam', 'defaulValue')\r\n\r\n        this.state = {\r\n            data: [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 4 }],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.dataInterval = setInterval(() => getData()\r\n            .then(data => this.setState({ data: data.docs || this.state.data }))\r\n            .catch((err) => console.error(err))\r\n            , 500)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.dataInterval);\r\n    }\r\n\r\n    render() {\r\n        const data = this.state.data.map(item => item.value);//[50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80]\r\n        const contentInset = { top: 20, bottom: 20 }\r\n\r\n        return (\r\n            <View style={styles.container}>\r\n                <Text>Gotcha!</Text>\r\n                {/* <Text>{JSON.stringify(this.state.data)}</Text> */}\r\n                <View style={{ height: '60%', width: '100%', flexDirection: 'row' }}>\r\n                    <YAxis\r\n                        data={data}\r\n                        contentInset={contentInset}\r\n                        svg={{\r\n                            fill: 'grey',\r\n                            fontSize: 10,\r\n                        }}\r\n                        numberOfTicks={10}\r\n                        formatLabel={(value) => `${value} ppm`}\r\n                    />\r\n                    <LineChart\r\n                        style={{ width: '80%', marginLeft: 16 }}\r\n                        data={data}\r\n                        svg={{ stroke: 'rgb(134, 65, 244)', strokeWidth: 3 }}\r\n                        contentInset={contentInset}\r\n                        curve={shape.curveNatural}\r\n                    >\r\n                        <Grid />\r\n                    </LineChart>\r\n                    {/* <XAxis\r\n                        style={{ marginHorizontal: -10 }}\r\n                        data={data}\r\n                        formatLabel={(value, index) => index}\r\n                        contentInset={{ left: 10, right: 10 }}\r\n                        svg={{ fontSize: 10, fill: 'black' }}\r\n                    /> */}\r\n                </View>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n})\r\n"]},"metadata":{},"sourceType":"module"}