{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\React\\\\Pneuma\\\\Pneuma\\\\app\\\\screens\\\\GettingStartedScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport AppIntroSlider from 'react-native-app-intro-slider';\nimport Navigation from \"../navigation/Navigation\";\nimport { data } from \"../constants/data\";\nimport { styles } from \"../styles/styles\";\nimport { CheckBox } from \"native-base\";\nstate = {\n  selectedLang: 0\n};\n\nvar GettingStartedScreen = function (_Component) {\n  _inherits(GettingStartedScreen, _Component);\n\n  var _super = _createSuper(GettingStartedScreen);\n\n  function GettingStartedScreen(props) {\n    var _this;\n\n    _classCallCheck(this, GettingStartedScreen);\n\n    _this = _super.call(this, props);\n\n    _this._onPressDone = function () {\n      Navigation.navigate('Dashboard', {\n        someParam: 1\n      });\n    };\n\n    _this._renderItem = function (_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        style: styles.slide,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, item.title), React.createElement(Image, {\n        source: item.image,\n        style: styles.image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }, item.text));\n    };\n\n    _this._keyExtractor = function (item) {\n      return item.title;\n    };\n\n    React.createElement(View, {\n      style: styles.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, React.createElement(CheckBox, {\n      checked: _this.state.selectedLang === 1,\n      color: \"#fc5185\",\n      onPress: function onPress() {\n        return _this.setState({\n          selectedLang: 1\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }), React.createElement(Text, {\n      style: _objectSpread({}, styles.checkBoxTxt, {\n        color: _this.state.selectedLang === 1 ? \"#fc5185\" : \"gray\",\n        fontWeight: _this.state.selectedLang === 1 ? \"bold\" : \"normal\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, \"Python\"));\n    return _this;\n  }\n\n  _createClass(GettingStartedScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ImageBackground, {\n        source: require(\"../../assets/bg4.jpg\"),\n        style: styles.imagebg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }, React.createElement(AppIntroSlider, {\n        keyExtractor: this._keyExtractor,\n        renderItem: this._renderItem,\n        data: data,\n        onDone: this._onPressDone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return GettingStartedScreen;\n}(Component);\n\nGettingStartedScreen.navigationOptions = {\n  title: 'Getting Started'\n};\nexport { GettingStartedScreen as default };","map":{"version":3,"sources":["C:/React/Pneuma/Pneuma/app/screens/GettingStartedScreen.js"],"names":["React","Component","AppIntroSlider","Navigation","data","styles","CheckBox","state","selectedLang","GettingStartedScreen","props","_onPressDone","navigate","someParam","_renderItem","item","slide","title","image","text","_keyExtractor","setState","checkBoxTxt","color","fontWeight","require","imagebg","navigationOptions"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;;AAEA,OAAOC,cAAP,MAA2B,+BAA3B;AAEA,OAAOC,UAAP;AACA,SAASC,IAAT;AACA,SAASC,MAAT;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACAC,KAAK,GAAC;AACFC,EAAAA,YAAY,EAAC;AADX,CAAN;;IAGqBC,oB;;;;;AAMjB,gCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAgBnBC,YAhBmB,GAgBJ,YAAM;AACjBR,MAAAA,UAAU,CAACS,QAAX,CAAoB,WAApB,EAAiC;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAjC;AACH,KAlBkB;;AAAA,UAoBnBC,WApBmB,GAoBL,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACxB,aACI,oBAAC,IAAD;AACI,QAAA,KAAK,EAAEV,MAAM,CAACW,KADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEX,MAAM,CAACY,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4BF,IAAI,CAACE,KAAjC,CAFJ,EAGI,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEF,IAAI,CAACG,KAApB;AAA2B,QAAA,KAAK,EAAEb,MAAM,CAACa,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEb,MAAM,CAACc,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2BJ,IAAI,CAACI,IAAhC,CAJJ,CADJ;AASH,KA9BkB;;AAAA,UAkCnBC,aAlCmB,GAkCH,UAACL,IAAD;AAAA,aAAUA,IAAI,CAACE,KAAf;AAAA,KAlCG;;AAIf,wBAAC,IAAD;AAAM,MAAA,KAAK,EAAEZ,MAAM,CAACU,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,MAAKR,KAAL,CAAWC,YAAX,KAA0B,CAA7C;AAAgD,MAAA,KAAK,EAAC,SAAtD;AAAgE,MAAA,OAAO,EAAE;AAAA,eAAI,MAAKa,QAAL,CAAc;AAACb,UAAAA,YAAY,EAAC;AAAd,SAAd,CAAJ;AAAA,OAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAEA,oBAAC,IAAD;AAAM,MAAA,KAAK,oBACLH,MAAM,CAACiB,WADF;AAEPC,QAAAA,KAAK,EAAC,MAAKhB,KAAL,CAAWC,YAAX,KAA0B,CAA1B,GAA4B,SAA5B,GAAsC,MAFrC;AAGPgB,QAAAA,UAAU,EAAC,MAAKjB,KAAL,CAAWC,YAAX,KAA0B,CAA1B,GAA6B,MAA7B,GAAqC;AAHzC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA;AAJe;AAclB;;;;6BAsBQ;AACL,aACI,oBAAC,eAAD;AAAiB,QAAA,MAAM,EAAEiB,OAAO,wBAAhC;AAA0D,QAAA,KAAK,EAAEpB,MAAM,CAACqB,OAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AACI,QAAA,YAAY,EAAE,KAAKN,aADvB;AAEI,QAAA,UAAU,EAAE,KAAKN,WAFrB;AAGI,QAAA,IAAI,EAAEV,IAHV;AAII,QAAA,MAAM,EAAE,KAAKO,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAUH;;;;EArD6CV,S;;AAA7BQ,oB,CAEVkB,iB,GAAoB;AACvBV,EAAAA,KAAK,EAAE;AADgB,C;SAFVR,oB","sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, View, TouchableOpacity, Image, TextInput, Picker, ImageBackground } from 'react-native';\r\nimport AppIntroSlider from 'react-native-app-intro-slider';\r\n//import AppIntroSlider to use it\r\nimport Navigation from '../navigation/Navigation';\r\nimport { data } from '../constants/data'\r\nimport { styles } from '../styles/styles'\r\nimport {CheckBox} from \"native-base\"\r\nstate={\r\n    selectedLang:0\r\n  }\r\nexport default class GettingStartedScreen extends Component {\r\n    \r\n    static navigationOptions = {\r\n        title: 'Getting Started'\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //const someExtractedParam = this.props.navigation.getParam('someParam', 'defaulValue')\r\n        <View style={styles.item} >\r\n        <CheckBox checked={this.state.selectedLang===1} color=\"#fc5185\" onPress={()=>this.setState({selectedLang:1})}/>\r\n        <Text style={\r\n          {...styles.checkBoxTxt,\r\n            color:this.state.selectedLang===1?\"#fc5185\":\"gray\",\r\n            fontWeight:this.state.selectedLang===1? \"bold\" :\"normal\"\r\n          }}\r\n          >Python</Text>\r\n        </View>\r\n    \r\n    }\r\n\r\n    _onPressDone = () => {\r\n        Navigation.navigate('Dashboard', { someParam: 1 })\r\n    }\r\n\r\n    _renderItem = ({ item }) => {\r\n        return (\r\n            <View\r\n                style={styles.slide}>\r\n                <Text style={styles.title}>{item.title}</Text>\r\n                <Image source={item.image} style={styles.image} />\r\n                <Text style={styles.text}>{item.text}</Text>\r\n        \r\n            </View>\r\n        );\r\n    };\r\n     \r\n  \r\n\r\n    _keyExtractor = (item) => item.title;\r\n\r\n    render() {\r\n        return (\r\n            <ImageBackground source={require('../../assets/bg4.jpg')} style={styles.imagebg}>\r\n                <AppIntroSlider\r\n                    keyExtractor={this._keyExtractor}\r\n                    renderItem={this._renderItem}\r\n                    data={data}\r\n                    onDone={this._onPressDone}\r\n                />\r\n            </ImageBackground>\r\n        );\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}