{"ast":null,"code":"var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nvar Base64 = {\n  btoa: function btoa() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var str = input;\n    var output = '';\n\n    for (var block = 0, charCode, i = 0, map = chars; str.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n      charCode = str.charCodeAt(i += 3 / 4);\n\n      if (charCode > 0xFF) {\n        throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n\n      block = block << 8 | charCode;\n    }\n\n    return output;\n  },\n  atob: function atob() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var str = input.replace(/=+$/, '');\n    var output = '';\n\n    if (str.length % 4 == 1) {\n      throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n\n    for (var bc = 0, bs = 0, buffer, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n      buffer = chars.indexOf(buffer);\n    }\n\n    return output;\n  }\n};\nexport { Base64 };","map":{"version":3,"sources":["C:/React/Pneuma/Pneuma/app/utils/index.js"],"names":["chars","Base64","btoa","input","str","output","block","charCode","i","map","charAt","charCodeAt","Error","atob","replace","length","bc","bs","buffer","String","fromCharCode","indexOf"],"mappings":"AACA,IAAMA,KAAK,GAAG,mEAAd;AACA,IAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE,gBAAwB;AAAA,QAAvBC,KAAuB,uEAAP,EAAO;AAC5B,QAAIC,GAAG,GAAGD,KAAV;AACA,QAAIE,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIC,KAAK,GAAG,CAAZ,EAAeC,QAAf,EAAyBC,CAAC,GAAG,CAA7B,EAAgCC,GAAG,GAAGT,KAA3C,EACEI,GAAG,CAACM,MAAJ,CAAWF,CAAC,GAAG,CAAf,MAAsBC,GAAG,GAAG,GAAN,EAAWD,CAAC,GAAG,CAArC,CADF,EAEEH,MAAM,IAAII,GAAG,CAACC,MAAJ,CAAW,KAAKJ,KAAK,IAAI,IAAIE,CAAC,GAAG,CAAJ,GAAQ,CAArC,CAFZ,EAEqD;AAEnDD,MAAAA,QAAQ,GAAGH,GAAG,CAACO,UAAJ,CAAeH,CAAC,IAAI,IAAI,CAAxB,CAAX;;AAEA,UAAID,QAAQ,GAAG,IAAf,EAAqB;AACnB,cAAM,IAAIK,KAAJ,CAAU,0FAAV,CAAN;AACD;;AAEDN,MAAAA,KAAK,GAAGA,KAAK,IAAI,CAAT,GAAaC,QAArB;AACD;;AAED,WAAOF,MAAP;AACD,GAnBY;AAqBbQ,EAAAA,IAAI,EAAE,gBAAwB;AAAA,QAAvBV,KAAuB,uEAAP,EAAO;AAC5B,QAAIC,GAAG,GAAGD,KAAK,CAACW,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAV;AACA,QAAIT,MAAM,GAAG,EAAb;;AAEA,QAAID,GAAG,CAACW,MAAJ,GAAa,CAAb,IAAkB,CAAtB,EAAyB;AACvB,YAAM,IAAIH,KAAJ,CAAU,mEAAV,CAAN;AACD;;AACD,SAAK,IAAII,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,CAAjB,EAAoBC,MAApB,EAA4BV,CAAC,GAAG,CAArC,EACEU,MAAM,GAAGd,GAAG,CAACM,MAAJ,CAAWF,CAAC,EAAZ,CADX,EAGE,CAACU,MAAD,KAAYD,EAAE,GAAGD,EAAE,GAAG,CAAL,GAASC,EAAE,GAAG,EAAL,GAAUC,MAAnB,GAA4BA,MAAjC,EACVF,EAAE,KAAK,CADT,IACcX,MAAM,IAAIc,MAAM,CAACC,YAAP,CAAoB,MAAMH,EAAE,KAAK,CAAC,CAAD,GAAKD,EAAL,GAAU,CAAf,CAA5B,CADxB,GACyE,CAJ3E,EAKE;AACAE,MAAAA,MAAM,GAAGlB,KAAK,CAACqB,OAAN,CAAcH,MAAd,CAAT;AACD;;AAED,WAAOb,MAAP;AACD;AAtCY,CAAf;AAyCA,SACIJ,MADJ","sourcesContent":["// Base64 function. TODO: move to a JS module and just import here.\r\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\nconst Base64 = {\r\n  btoa: (input: string = '') => {\r\n    let str = input;\r\n    let output = '';\r\n\r\n    for (let block = 0, charCode, i = 0, map = chars;\r\n      str.charAt(i | 0) || (map = '=', i % 1);\r\n      output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\r\n\r\n      charCode = str.charCodeAt(i += 3 / 4);\r\n\r\n      if (charCode > 0xFF) {\r\n        throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\r\n      }\r\n\r\n      block = block << 8 | charCode;\r\n    }\r\n\r\n    return output;\r\n  },\r\n\r\n  atob: (input: string = '') => {\r\n    let str = input.replace(/=+$/, '');\r\n    let output = '';\r\n\r\n    if (str.length % 4 == 1) {\r\n      throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\r\n    }\r\n    for (let bc = 0, bs = 0, buffer, i = 0;\r\n      buffer = str.charAt(i++);\r\n\r\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\r\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\r\n    ) {\r\n      buffer = chars.indexOf(buffer);\r\n    }\r\n\r\n    return output;\r\n  }\r\n};\r\n\r\nexport {\r\n    Base64\r\n}"]},"metadata":{},"sourceType":"module"}